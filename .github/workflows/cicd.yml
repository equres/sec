name: CI/CD

on:
  push:
    branches:
      - '*'
jobs:
  build_and_test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_HOST: localhost
          POSTGRES_USER: test_postgres
          POSTGRES_PASSWORD: test_postgres
          POSTGRES_DB: sec_project
          POSTGRES_PORT: 5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:

      - uses: actions/checkout@v2

      - uses: actions/setup-go@v2
        with:
          stable: 'false'
          go-version: '1.16'

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: 'latest'
        
      - name: Clean Up Code
        run: make clean

      - name: Before cleaning
        run: ls -la
        
      - name: Clean the previous build
        run: make clean

      - name: After cleaning
        run: ls -la
        
      - name: Build App
        run: make build

      - name: Generate MD5 Checksum
        run: openssl md5 sec

      - name: View Dirs/Files
        run: ls -la
      
      - name: Copy Config File
        run: |
          mkdir ~/.config/sec/
          cp ./ci/config.yaml ~/.config/sec/config.yaml

      - name: Run Migration
        run: make migrateup

      - name: Install PostgreSQL
        run: |
          sudo apt-get update
          sudo apt-get install --yes postgresql-client

      - name: Testing Database
        run: | 
          ./sec de 2021/06
          ./sec dlist
      
      - name: View Dirs/Files Again
        run: ls -la

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: prog_artifacts
          path: |
            sec
            Makefile
          retention-days: 1

  deploy: 
    needs: build_and_test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:

      - name: Download a single artifact
        uses: actions/download-artifact@v2
        with:
          name: prog_artifacts

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SECPROD_PRIV_KEY }}" > ~/.ssh/id_rsa
          chmod 700 ~/.ssh/id_rsa
          eval `ssh-agent -s`
          ssh-keyscan -H `cat .host.cfg` >> ~/.ssh/known_hosts
          ssh-add

      - name: Copy App to Production Server
        run: make deploy
